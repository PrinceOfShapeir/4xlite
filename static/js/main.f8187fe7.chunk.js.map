{"version":3,"sources":["shepherd_with_his_flock_2004.166.3.jpg","appSplash.js","components/worldGen.js","tileset/trees.svg","tileset/grass.svg","tileset/water.svg","tileset/hills.svg","tileset/treesCity.svg","tileset/hillsCity.svg","tileset/grassCity.svg","components/WorldGrid.js","components/events.js","components/bottomBar.js","components/GameScreen.js","App.js","index.js"],"names":["AppSplash","props","className","href","target","rel","terrainSelect","x","y","size","probSeed","randomNumber","Math","random","pow","waterProbability","worldGen","waterProb","world","i","push","z","terrain","settled","GridRow","row","selectTerrain","gridRow","style","padding","margin","src","grassCity","alt","onClick","grass","treesCity","trees","hillsCity","hills","water","console","log","lineHeight","GridCols","grid","rowsArray","worldGrid","cellPadding","cellSpacing","border","borderCollapse","colSpan","Grid","SingularEventCode","tribalVillageFound","text","option1Text","option2Text","outcome1Title","outcome2Title","outcome1Text","outcome2Text","outcome1Payoffs","food","production","commerce","fpy","ppy","cpy","outcome2Payoffs","endEventText1","endEventText2","strangerInAStrangeLand","meteorite","events","eventsOrder","Object","keys","swap","floor","length","terrainInfo","settle","selectedIsSettled","turn","nextTurn","settlers","info","type","bottomCSS","fontFamily","backgroundColor","borderColor","borderStyle","borderWidth","borderImageSlice","bottomBar","endGame","Navbar","bg","expand","fixed","Text","cityCount","endGameTurns","currentEvent","eventOutcome","tallyEventOutcome","whichEventNumber","killEvent","selectedTerrain","selectedTerrainX","selectedTerrainY","GameScreen","state","worldMap","worldSize","foodIncome","foodConsumption","commerceIncome","productionIncome","setState","payoffs","fireEvent","pop","defeat","foodBalance","productionBalance","commerceBalance","generateWorld","setSize","event","value","gridCopy","JSON","parse","stringify","settledCallBack","renderWorldGenTemplate","name","min","max","onChange","this","Component","App","splashVisible","toggleSplash","backgroundImage","background","height","width","title","frameborder","allow","allowfullscreen","position","right","bottom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8187fe7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/shepherd_with_his_flock_2004.166.3.564f68bb.jpg\";","import React from 'react';\r\nimport background from './shepherd_with_his_flock_2004.166.3.jpg';\r\n\r\n\r\n\r\nfunction AppSplash(props) {\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <p>\r\n                This is my submission for the august <a\r\n                    className=\"App-link\"\r\n                    href=\"https://mintbean.io/meets/d51762d5-b874-4cc1-a420-ff316600192f\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >Mintbean Hackathon.</a>\r\n            </p>\r\n            <p>This is intended to be a mock up of a 4x game, featuring procedural world generation.</p>\r\n            <p>If you like the game, or would like to collaborate on work, you may visit my <a href=\"https://princeofshapeir.github.io/react-portfolio/\">home page</a>.</p>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default AppSplash;","\r\n\r\nfunction waterProbability(x, y, size, probSeed = 0.9) {\r\n\r\n    return Math.pow(probSeed, x) + Math.pow(probSeed, (size - 1 - y));\r\n}\r\n//we will just make the landProbs equal to each other\r\n\r\nfunction terrainSelect(x, y, size, probSeed) {\r\n\r\n\r\n    //params contains:\r\n    //int size\r\n    let randomNumber = Math.random();\r\n    let waterProb = waterProbability(x,y,size, probSeed);\r\n\r\n    if (randomNumber <= waterProb) {\r\n        //console.log(\"water probability was \" + waterProb)\r\n        return \"water\";\r\n    }\r\n    else {\r\n        randomNumber = Math.random();\r\n\r\n        if(randomNumber<.33) {\r\n            return \"hills\";\r\n        } else if (randomNumber <.66){\r\n            return \"trees\";\r\n        } else {\r\n            return \"grass\";\r\n        }\r\n\r\n\r\n    }\r\n    \r\n\r\n    //generate 2d array of size^2\r\n    //copy to this.state.worldMap\r\n    //place terrain according to probability set\r\n    // edgeProbability, when x or y = 0, or size\r\n    // edgeProbability: {water: }\r\n}\r\n\r\n\r\nfunction worldGen(size, waterProb) {\r\n\r\n    let world = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        world.push([]);\r\n        for (let z = 0; z < size; z++) {\r\n\r\n            world[i][z] = {\r\n                x: i,\r\n                y: z,\r\n                terrain: terrainSelect(i, z, size, waterProb),\r\n                settled: false\r\n            };\r\n\r\n        }\r\n    }\r\n    //console.log(world);\r\n    return world;\r\n}\r\n\r\nexport default worldGen;","export default __webpack_public_path__ + \"static/media/trees.45f638e9.svg\";","export default __webpack_public_path__ + \"static/media/grass.85473006.svg\";","export default __webpack_public_path__ + \"static/media/water.7ede080d.svg\";","export default __webpack_public_path__ + \"static/media/hills.352b1dd7.svg\";","export default __webpack_public_path__ + \"static/media/treesCity.630c4054.svg\";","export default __webpack_public_path__ + \"static/media/hillsCity.00cc3259.svg\";","export default __webpack_public_path__ + \"static/media/grassCity.adab9481.svg\";","import trees from \"../tileset/trees.svg\";\r\nimport grass from \"../tileset/grass.svg\";\r\nimport water from \"../tileset/water.svg\";\r\nimport hills from \"../tileset/hills.svg\";\r\nimport treesCity from \"../tileset/treesCity.svg\"\r\nimport hillsCity from \"../tileset/hillsCity.svg\"\r\nimport grassCity from \"../tileset/grassCity.svg\"\r\n\r\n\r\nfunction GridRow(row, selectTerrain) {\r\n    let gridRow = [];\r\n    //console.log(\"row is: \");\r\n    //\r\n    //console.log(row);\r\n\r\n    for (let i in row) {\r\n        let settled = row[i].settled;\r\n\r\n        switch (row[i].terrain) {\r\n\r\n            case \"grass\":\r\n                gridRow.push(\r\n                    //grassUrl\r\n                    //<Col> image goes here </Col>\r\n                    <td style={{padding: 0, margin: 0}}>\r\n                        {(!settled) ? (<img src={grass} alt=\"grass\" onClick={()=>selectTerrain(\"grass\", row[i].x, row[i].y)}/>)\r\n                        :(<img src={grassCity} alt=\"grassCity\" onClick={()=>selectTerrain(\"grass\", row[i].x, row[i].y)}/>)}\r\n                        \r\n                    </td>\r\n                );\r\n                break;\r\n            case \"trees\":\r\n                gridRow.push(\r\n                    //treesUrl\r\n                    <td style={{padding: 0, margin: 0}}>\r\n                        {(!settled) ? \r\n                        (<img src={trees} alt=\"trees\" onClick={()=>selectTerrain(\"trees\", row[i].x, row[i].y)} />)\r\n                        :(<img src={treesCity} alt=\"treesCity\" onClick={()=>selectTerrain(\"trees\", row[i].x, row[i].y)}/>)}\r\n                        \r\n                    </td>\r\n                );\r\n                break;\r\n            case \"hills\":\r\n                gridRow.push(\r\n                    //hillsUrl\r\n                    <td style={{padding: 0, margin: 0}}>\r\n                        {(!settled) ? \r\n                        (<img src={hills} alt=\"hills\" onClick={()=>selectTerrain(\"hills\", row[i].x, row[i].y)} />)\r\n                        :(<img src={hillsCity} alt=\"hillsCity\" onClick={()=>selectTerrain(\"hills\", row[i].x, row[i].y)}/>)}\r\n                        \r\n                    </td>\r\n                );\r\n                break;\r\n            case \"water\":\r\n                gridRow.push(\r\n                    //waterUrl\r\n                    <td style={{padding: 0, margin: 0}}>\r\n                        <img src={water} alt=\"water\" onClick={()=>selectTerrain(\"water\", row[i].x, row[i].y)}/>\r\n                    </td>\r\n                );\r\n                break;\r\n            default:\r\n                console.log(\"Error Default\");\r\n                gridRow.push(\r\n\r\n                    //grassUrl\r\n                    <td style={{padding: 0, margin: 0}}>\r\n                        <img src={grass} alt=\"grass\" onClick={()=>selectTerrain(\"grass\", row[i].x, row[i].y)}/>\r\n                    </td>\r\n                );\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <tr style={{lineHeight: 0}}>\r\n            {gridRow}\r\n        </tr>        \r\n    )\r\n\r\n}\r\n\r\nfunction GridCols (grid, selectTerrain) {\r\n\r\n    let rowsArray = [];\r\n    //console.log(\"here is the original grid, i think\")\r\n    //console.log(grid);\r\n    for(let i in grid) {\r\n\r\n        rowsArray.push(GridRow(grid[i], selectTerrain));\r\n\r\n    }\r\n\r\n    return rowsArray;\r\n\r\n\r\n}\r\n\r\nfunction Grid (grid, selectTerrain) {\r\n    return (\r\n        <>\r\n            <table cellPadding=\"0\" cellSpacing=\"0\" border=\"0\" style={{borderCollapse: \"collapse\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th colSpan=\"2\">World Map</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                        {GridCols(grid, selectTerrain)}\r\n                </tbody>\r\n\r\n            </table>\r\n\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nfunction worldGrid (grid, selectTerrain) {\r\n\r\n    //grid comes from state\r\n\r\n    //console.log(grid);\r\n\r\n    \r\n\r\n    return Grid(grid, selectTerrain);\r\n\r\n}\r\n\r\n\r\nexport default worldGrid;","export const  SingularEventCode = {\r\n\r\n\r\n         tribalVillageFound: {\r\n\r\n        \r\n            text: \"Scouts report an abandoned tribal village not far from here. Do you investigate? \",\r\n\r\n            option1Text: \"Ignore\",\r\n            option2Text: \"Explore\",\r\n\r\n            outcome1Title: \"Can't Be Bothered\",\r\n            outcome2Title: \"Research Found!\", \r\n\r\n            outcome1Text:\"We have better things to do.\",\r\n\r\n            outcome2Text:\"Stumbling through the abandoned huts, your scouts make a momentous find. You have discovered the Manhattan Project!\",\r\n\r\n            outcome1Payoffs: {\r\n                food: 0,\r\n                production: 10,\r\n                commerce: 0,\r\n                fpy: 0,\r\n                ppy: 0,\r\n                cpy: 0\r\n            },\r\n\r\n            outcome2Payoffs: {\r\n\r\n                food: 0,\r\n                production: -5,\r\n                commerce: 0,\r\n                fpy: 0,\r\n                ppy: 0,\r\n                cpy: 0\r\n            },\r\n\r\n            endEventText1: \"By focusing, we will gain a bonus to our productivity!\",\r\n            endEventText2: \"What is this I don't even\"\r\n\r\n        \r\n        },\r\n\r\n\r\n\r\n        strangerInAStrangeLand: {\r\n\r\n        \r\n            text: \"A strange man washes ashore, wearing odd clothes and speaking unintelligible syllables. After learning some local speech, he purports to be something called a 'CEO' of a 'company' named 'Quantum and Time.' He asks what year it is. \",\r\n\r\n            option1Text: \"Sacrifice\",\r\n            option2Text: \"Adapt\",\r\n\r\n            outcome1Title: \"Human Sacrifice\",\r\n            outcome2Title: \"Immured In The Temple\", \r\n\r\n            outcome1Text:\"The strange barbarian has been sent by the gods, and to the gods he must return.\",\r\n\r\n            outcome2Text:\"The strange man is clearly insane. The shamans suggest shackling him in a temple, to channel his lunacy through prayer.\",\r\n\r\n            outcome1Payoffs: {\r\n                food: 5,\r\n                production: -1,\r\n                commerce: 0,\r\n                fpy: 0,\r\n                ppy: 0,\r\n                cpy: 0\r\n            },\r\n\r\n            outcome2Payoffs: {\r\n\r\n                food: -5,\r\n                production: -5,\r\n                commerce: 10,\r\n                fpy: 0,\r\n                ppy: 0,\r\n                cpy: 0\r\n            },\r\n\r\n            endEventText1: \"Looks like meat's back on the menu, boys!\",\r\n            endEventText2: \"But we will have to pay for his upkeep!\"\r\n\r\n        \r\n        },\r\n\r\n\r\n        meteorite: {\r\n\r\n        \r\n            text: \"As you gaze upon the multitude of stars in the night sky, a bright orange fireball lights up the firmament. Panting for breath, you race to the scene. Inside a smoking crater, you find a glowing hunk of rock. As it cools, you notice an otherworldy silvery metallic sheen, the likes of which you have never seen. You claim it in the name of your people. You make it into \",\r\n\r\n            option1Text: \"Swords\",\r\n            option2Text: \"Plowshares\",\r\n\r\n            outcome1Title: \"Ancestral Sword Gained\",\r\n            outcome2Title: \"Water From The Earth\", \r\n\r\n            outcome1Text:\"The sword is heavy and quite unwieldy, yet the villagers are in awe of the sight of it. Tributes pour in, and soon your coffers are full.\",\r\n            outcome2Text:\"Loathe to sully the sacred iron, the villagers implement it as a tool of divination. The dowsing rod strikes fresh water. You have invented the well.\",\r\n\r\n            outcome1Payoffs: {\r\n                food: 0,\r\n                production: 0,\r\n                commerce: 10,\r\n                fpy: 0,\r\n                ppy: 0,\r\n                cpy: 0\r\n            },\r\n\r\n            outcome2Payoffs: {\r\n\r\n                food: 10,\r\n                production: 0,\r\n                commerce: 0,\r\n                fpy: 0,\r\n                ppy: 0,\r\n                cpy: 0\r\n            },\r\n\r\n            endEventText1: \"A sign of our divine right to rule!\",\r\n            endEventText2: \"No, no. Dig up, stupid!\"\r\n        \r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\nexport function events () {\r\n    //todo: randomize their order here or in gamescreen\r\n    let eventsOrder = Object.keys(SingularEventCode);\r\n\r\n    \r\n\r\n        for(let i in eventsOrder){\r\n\r\n            let swap = Math.floor(Math.random() * Math.floor(eventsOrder.length));\r\n            \r\n            [eventsOrder[i],eventsOrder[swap]] = [eventsOrder[swap], eventsOrder[i]];\r\n        }\r\n\r\n    return eventsOrder;\r\n\r\n\r\n    \r\n    \r\n}\r\n\r\n","import Navbar from 'react-bootstrap/Navbar'\r\nimport trees from \"../tileset/trees.svg\";\r\nimport grass from \"../tileset/grass.svg\";\r\nimport water from \"../tileset/water.svg\";\r\nimport hills from \"../tileset/hills.svg\";\r\nimport treesCity from \"../tileset/treesCity.svg\"\r\nimport hillsCity from \"../tileset/hillsCity.svg\"\r\nimport grassCity from \"../tileset/grassCity.svg\"\r\nimport \"./navBar.css\";\r\nimport {SingularEventCode} from \"./events\";\r\n\r\n\r\n\r\nfunction settlePrompt (settlers) {\r\n\r\n    return (\r\n        <p>You have {settlers} settlers. You should probably put them somewhere. You can do this by clicking on some non-watery terrain. </p>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction terrainInfo (terrain, x, y, settle, settled, selectedIsSettled, turn, nextTurn, settlers) {\r\n    let info = () => {\r\n        switch (terrain) {\r\n\r\n                        case \"grass\":\r\n                            return(\r\n\r\n                                <>\r\n                                    <img src={selectedIsSettled ? grassCity : grass} alt=\"grass\" />\r\n                                    &nbsp;\r\n                                    <p>You have {selectedIsSettled ? \"settled\" : \"chosen\"} grassland, which produces two food.</p>\r\n                                    \r\n                                </>\r\n\r\n                            );\r\n                        case \"hills\":\r\n                            return(\r\n\r\n                                <>\r\n                                    <img src={selectedIsSettled ? hillsCity : hills} alt=\"hills\" />\r\n                                    &nbsp;\r\n                                    <p>You have {selectedIsSettled ? \"settled\" : \"chosen\"} hills, which produces two production, and has a defensive bonus.</p>\r\n                                </>\r\n\r\n                            );\r\n                        case \"trees\":\r\n                            return(\r\n\r\n                                <>\r\n                                    <img src={selectedIsSettled ? treesCity : trees} alt=\"trees\" />\r\n                                    &nbsp;\r\n                                    <p>You have {selectedIsSettled ? \"settled\" : \"chosen\"} forest, which produces one food and one production.</p>\r\n                                </>\r\n\r\n                            );\r\n                        case \"water\":\r\n                            return(\r\n\r\n                                <>\r\n                                    <img src={water} alt=\"water\" />\r\n                                    &nbsp;\r\n                                    <p>You have {selectedIsSettled ? \"settled\" : \"chosen\"} water, which you were told not to do. Water produces one food, and one commerce point.</p>\r\n                                </>\r\n\r\n                            );\r\n                        default:\r\n                            return(\r\n                                <>\r\n                                <p>You have somehow chosen that which cannot be chosen. The FBI are on their way.</p>\r\n                                &nbsp;\r\n                                <p>{terrain}</p>\r\n                                </>\r\n                            );\r\n                        \r\n\r\n\r\n                    }\r\n\r\n\r\n    }\r\n    return (\r\n        <>\r\n                {\r\n                    info()\r\n                }\r\n            {/*<p>The coordinates for this tile are {x}, {y}</p>*/}\r\n            <br /> &nbsp;\r\n            {(terrain!=\"water\") && (!selectedIsSettled) && (settlers>0) && (<button type='button' onClick={()=>settle(x,y)}>Settle Here!</button>)}\r\n        </>\r\n    );\r\n\r\n\r\n\r\n}\r\nconst bottomCSS = {\r\n\r\n    fontFamily: \"URW Chancery L, Brush Script MT, cursive\",\r\n    backgroundColor: \"rgb(237,237,95)\",\r\n    borderColor: \"rgb(254,255,0)\",\r\n    borderStyle: \"double\",\r\n    borderWidth: \"0.5em\",\r\n    borderImageSlice: 1,\r\n\r\n}\r\n\r\nfunction bottomBar (props) {\r\n\r\n    if (!props.endGame) {\r\n\r\n        return (\r\n           \r\n                <Navbar className=\"bottomBar\" expand=\"md\" fixed=\"bottom\">\r\n\r\n                        {(props.turn===10) && ( \r\n                        \r\n                            <p>A village elder comes to you in the dead of night, recounting a vision of doom. \r\n                            Within {props.endGameTurns} moons, they say, a great flood will inundate the land, erasing any and all trace of a once proud people.\r\n                            As some of the villagers make to stitch together rafts and flee, you begin an impassioned plea not to abandon all that you have accomplished thus far. \r\n                            You have until then to rally the four tribes, to construct great works to hold back the waters, or else the land will descend once more into barbarism.</p>\r\n                        \r\n                        )}\r\n                        &nbsp;\r\n                        {props.turn!==10 && (\r\n                            <>\r\n                                {props.currentEvent ? \r\n                                \r\n                                //Event message\r\n                                \r\n                                (\r\n                                    <> {!props.eventOutcome && (\r\n\r\n                                        <p>{SingularEventCode[props.currentEvent].text} <br />\r\n                                            <button type=\"button\" onClick={()=>props.tallyEventOutcome(SingularEventCode[props.currentEvent].outcome1Payoffs, 1)}>{SingularEventCode[props.currentEvent].option1Text}</button>&nbsp;&nbsp;<button type=\"button\"  onClick={()=>props.tallyEventOutcome(SingularEventCode[props.currentEvent].outcome2Payoffs, 2)}>{SingularEventCode[props.currentEvent].option2Text}</button>\r\n                                        </p>\r\n                                    )}\r\n\r\n                                    {props.eventOutcome && (\r\n                                        <div>\r\n                                            <p><b>{SingularEventCode[props.currentEvent][`outcome${props.whichEventNumber}Title`]}</b></p>\r\n                                            <p>\r\n                                            {SingularEventCode[props.currentEvent][`outcome${props.whichEventNumber}Text`]}\r\n                                            </p>\r\n                                            <p><button type=\"button\" onClick={props.killEvent}>{\r\n                                            SingularEventCode[props.currentEvent][`endEventText${props.whichEventNumber}`]\r\n                                            }\r\n                                            </button></p>\r\n                                        </div>\r\n\r\n                                    )}\r\n                                        \r\n                                        \r\n                                    \r\n                                    </>\r\n                                ) : (\r\n                                <p>There are no current events.\r\n                                </p>\r\n                                \r\n                                )}\r\n                            </>\r\n                        )}\r\n                        &nbsp;\r\n                        {(props.settlers>0) && settlePrompt(props.settlers)}\r\n                        &nbsp;\r\n                        {props.selectedTerrain && terrainInfo(props.selectedTerrain, props.selectedTerrainX, props.selectedTerrainY, props.settle, props.settled, props.selectedIsSettled, props.turn, props.nextTurn, props.settlers)}\r\n                        &nbsp;\r\n                        {props.settled && ( <>\r\n                            <p>Food: {props.food}</p>\r\n                            <p>Production: {props.production}</p>\r\n                            <p>Commerce: {props.commerce}</p>\r\n                        </>\r\n                        )}\r\n                        &nbsp;\r\n                        {(props.turn>10) && (<p>Turns until the Flood: {props.endGameTurns-props.turn}</p>)}\r\n                        &nbsp;\r\n                        {props.settled && (<button type=\"button\" onClick={props.nextTurn}>End Turn {props.turn}</button>)}\r\n                    \r\n                </Navbar>\r\n            \r\n        );\r\n    } else return (\r\n\r\n        <Navbar bg=\"light\" expand=\"md\" fixed=\"bottom\" style={bottomCSS}>\r\n            {(props.endGame===\"Victory\") ?\r\n             ( <>\r\n                    <Navbar.Text>Your people have tamed the waters and held back the tide. History will remember you as the first. </Navbar.Text>\r\n                    &nbsp;\r\n                    <Navbar.Text>Final city count: {props.cityCount}</Navbar.Text>\r\n                </>\r\n             )\r\n             : (<p>You and your people sink beneath the waves. Forgotten like so many others.</p>)\r\n              }\r\n            </Navbar>        \r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default bottomBar;","import React, { Component } from \"react\"\r\nimport worldGen from \"./worldGen\"\r\nimport worldGrid from \"./WorldGrid\";\r\nimport bottomBar from \"./bottomBar\";\r\nimport {events} from \"./events\";\r\n\r\n\r\nclass GameScreen extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            worldGen: false,\r\n            worldMap: null,\r\n            worldSize: 50,\r\n            settlers: 1,\r\n            settled: false,\r\n            selectedTerrain: null,\r\n            turn: 0,\r\n            food: 0,\r\n            production: 0,\r\n            commerce: 0,\r\n            foodIncome: 0,\r\n            foodConsumption: 0,\r\n            commerceIncome: 0,\r\n            productionIncome: 0,\r\n            endGame: null,\r\n            cityCount: 0,\r\n            endGameTurns: 60,\r\n            eventsOrder: events(),\r\n            currentEvent: null,\r\n            eventOutcome: false,\r\n            whichEventNumber: null\r\n        }\r\n\r\n        this.killEvent = () => {\r\n\r\n            if(this.state.currentEvent) {\r\n                this.setState({\r\n                    currentEvent: null,\r\n                    eventOutcome: false,\r\n                    whichEventNumber: null\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        this.tallyEventOutcome = (payoffs, whichEventNumber) => {\r\n\r\n            console.log(`Should be firing event outcome ${whichEventNumber}`);\r\n\r\n            return this.setState({\r\n                food: this.state.food + payoffs.food,\r\n                production: this.state.production + payoffs.production,\r\n                commerce: this.state.commerce + payoffs.commerce,\r\n                eventOutcome: true,\r\n                whichEventNumber: whichEventNumber\r\n            });\r\n\r\n\r\n        }\r\n\r\n        this.fireEvent = () => {\r\n\r\n            //check for eventOrder.length before activating this function\r\n\r\n            //console.log(\"event should have fired...\");\r\n            \r\n\r\n            let events = [...this.state.eventsOrder];\r\n\r\n            let currentEvent = events.pop();\r\n\r\n            console.log(currentEvent);\r\n\r\n            return this.setState({\r\n                currentEvent: currentEvent,\r\n                eventsOrder: events\r\n            });\r\n        }\r\n\r\n        this.defeat = () => {\r\n\r\n            this.setState({\r\n                worldMap: worldGen(this.state.worldSize, 1)\r\n            })\r\n\r\n        }\r\n        this.endGame = () => {\r\n\r\n            let victoryCondition = this.state.production - 100 >= 0;\r\n            //victory\r\n\r\n            if(victoryCondition) {\r\n\r\n                return this.setState({\r\n                    endGame: \"Victory\"\r\n                })\r\n            } else {\r\n\r\n                this.setState({\r\n                    endGame: \"Defeat\"\r\n                });\r\n\r\n                return this.defeat();\r\n            }\r\n\r\n\r\n            //defeat\r\n\r\n        }\r\n        this.nextTurn = () => {\r\n\r\n            if(this.state.turn>=this.state.endGameTurns) {\r\n                return this.endGame();\r\n            }\r\n\r\n            if(this.state.eventsOrder.length>0&&!this.state.currentEvent) {\r\n\r\n                if(Math.random()<=0.20) {\r\n\r\n                    this.fireEvent();\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n            let foodBalance = this.state.foodIncome - this.state.foodConsumption;\r\n            let productionBalance = this.state.productionIncome;\r\n            let commerceBalance = this.state.commerceIncome;\r\n\r\n            if(this.state.food>10){\r\n                console.log(\"Should be spawning a new pop\");\r\n                foodBalance = foodBalance - 10;\r\n                this.setState({\r\n                    settlers: this.state.settlers + 1\r\n                })\r\n            }\r\n\r\n            return this.setState({\r\n                turn: this.state.turn + 1,\r\n                food: this.state.food + foodBalance,\r\n                production: this.state.production + productionBalance,\r\n                commerce: this.state.commerce + commerceBalance\r\n            });\r\n\r\n        }\r\n\r\n        this.generateWorld = () => {\r\n            return this.setState({\r\n                worldMap: worldGen(this.state.worldSize),\r\n                worldGen: !this.state.worldGen\r\n            })\r\n\r\n        }\r\n\r\n        this.setSize = (event) => {\r\n\r\n            return this.setState({\r\n                worldSize: event.target.value\r\n            })\r\n\r\n        }\r\n\r\n        this.selectTerrain = (terrain, x, y) => {\r\n\r\n            return this.setState({\r\n                selectedTerrain: terrain,\r\n                selectedTerrainX: x,\r\n                selectedTerrainY: y\r\n            })\r\n\r\n        }\r\n\r\n\r\n        this.settle = (x,y) => {\r\n\r\n            //ultimately we would probably want to keep a primitive array to map the settled areas\r\n            //but for now we can just dump everything into the world map\r\n            let gridCopy = JSON.parse(JSON.stringify(this.state.worldMap));\r\n\r\n            gridCopy[x][y].settled = true;\r\n\r\n            switch(gridCopy[x][y].terrain){\r\n\r\n                case \"grass\":\r\n                    console.log(\"adding grassland income\");\r\n                    this.setState({\r\n                        foodIncome: this.state.foodIncome + 2\r\n                    });\r\n                    break;\r\n                case \"hills\":\r\n                    console.log(\"Adding hills income\");\r\n                    this.setState({\r\n                        productionIncome: this.state.productionIncome + 2\r\n                    });\r\n                    break;\r\n                case \"trees\":\r\n                    console.log(\"adding trees income\");\r\n                    this.setState({\r\n                        foodIncome: this.state.foodIncome + 1,\r\n                        productionIncome: this.state.productionIncome + 1\r\n                    });\r\n                    break;\r\n                default:\r\n                    console.log(\"settlers are having trouble cultivating the land\");\r\n                    break;\r\n\r\n            }\r\n\r\n\r\n            this.setState({worldMap: gridCopy})\r\n            return this.settledCallBack();\r\n\r\n        }\r\n\r\n        this.settledCallBack = () => {\r\n\r\n            return this.setState({\r\n                settled: true,\r\n                settlers: this.state.settlers-1,\r\n                foodConsumption: this.state.foodConsumption + 1,\r\n                cityCount: this.state.cityCount + 1\r\n            })\r\n\r\n        }\r\n\r\n        this.renderWorldGenTemplate = () => {\r\n\r\n            return (\r\n                <>\r\n                    <p>Here is a primordial world without parameters.</p>\r\n                    <p>What is the size of this world?</p>\r\n                    <form>\r\n                        <label>Selected map type is {this.state.worldSize>30 ? (\"Pangaea\") : (\"Archipelago\")}</label><br />\r\n                        <input type=\"number\" name=\"size\" min=\"20\" max=\"100\" value={this.state.worldSize} onChange={this.setSize}></input>\r\n                        <button type='button' onClick={this.generateWorld}>Generate World</button>\r\n                    </form>\r\n\r\n                </>\r\n            );\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.worldGen && (<this.renderWorldGenTemplate />)}\r\n                {this.state.worldMap && worldGrid(this.state.worldMap, this.selectTerrain)}\r\n                {this.state.worldMap && bottomBar({\r\n                    settled: this.state.settled, \r\n                    settlers: this.state.settlers, \r\n                    selectedTerrain: this.state.selectedTerrain,\r\n                    selectedTerrainX: this.state.selectedTerrainX,\r\n                    selectedTerrainY: this.state.selectedTerrainY,\r\n                    selectedIsSettled: this.state.worldMap[this.state.selectedTerrainX|0][this.state.selectedTerrainY|0].settled,\r\n                    turn: this.state.turn,\r\n                    food: this.state.food,\r\n                    commerce: this.state.commerce,\r\n                    production: this.state.production,\r\n                    settle: this.settle,\r\n                    nextTurn: this.nextTurn, \r\n                    endGame: this.state.endGame,\r\n                    cityCount: this.state.cityCount,\r\n                    endGameTurns: this.state.endGameTurns,\r\n                    currentEvent: this.state.currentEvent,\r\n                    killEvent: this.killEvent,\r\n                    eventOutcome: this.state.eventOutcome,\r\n                    tallyEventOutcome: this.tallyEventOutcome,\r\n                    whichEventNumber: this.state.whichEventNumber\r\n                    })}\r\n                \r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default GameScreen;","import './App.css';\nimport React, { Component } from \"react\";\nimport AppSplash from './appSplash';\nimport GameScreen from './components/GameScreen';\nimport background from './shepherd_with_his_flock_2004.166.3.jpg';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      splashVisible: true\n    }\n\n    this.toggleSplash = () => {\n      this.setState({\n        splashVisible: !this.state.splashVisible\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div style={this.state.splashVisible ? {backgroundImage: `url(${background})`, height: '100vh'} : {}}>\n        {this.state.splashVisible && (<AppSplash toggleSplash={this.toggleSplash} />)}\n        {!this.state.splashVisible && <GameScreen />}\n        <div className=\"App\">     \n          <h4>Play Music</h4>\n              <iframe width={this.state.splashVisible ? \"250\" : \"50\"} height={this.state.splashVisible ? \"250\" : \"50\"} src=\"https://www.youtube-nocookie.com/embed/videoseries?list=PL18D349C72C3BB0D5\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n              {this.state.splashVisible && \n              \n                (\n\n                <p>\n                    <button type='button' onClick={this.toggleSplash}>\n                        Just take me to the game already!\n                    </button>\n                </p>\n\n                )\n              \n              }\n        </div>\n\n        {this.state.splashVisible && (\n          <p style={{position: 'absolute', right: '0', bottom: '0'}}>Jean-Victor Bertin - Shepherd with His Flock, c. 1820. All works in public domain.</p>\n        )}\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}